import { Provider, TransactionRequest } from "@ethersproject/providers";
import { BigNumberish, BytesLike, Bytes, Signer } from "ethers";
export interface TypedDataDomain {
    name?: string;
    version?: string;
    chainId?: BigNumberish;
    verifyingContract?: string;
    salt?: BytesLike;
}
export interface TypedDataField {
    name: string;
    type: string;
}
export type Deferrable<T> = {
    [K in keyof T]: T[K] | Promise<T[K]>;
};
export declare class VoidSigner extends Signer {
    readonly address: string;
    readonly provider?: Provider;
    constructor(_address: string, _provider?: Provider);
    getAddress(): Promise<string>;
    _fail(message: string, operation: string): Promise<any>;
    signMessage(message: Bytes | string): Promise<string>;
    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;
    connect(provider: Provider): VoidSigner;
}
