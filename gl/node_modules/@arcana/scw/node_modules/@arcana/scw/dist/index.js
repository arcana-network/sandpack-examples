"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.SCW = void 0;
const tslib_1 = require("tslib");
const account_1 = require("@biconomy/account");
const bundler_1 = require("@biconomy/bundler");
const paymaster_1 = require("@biconomy/paymaster");
const axios_1 = tslib_1.__importDefault(require("axios"));
class SCW {
    api_key;
    gateway_url = "https://gateway-dev.arcana.network";
    provider;
    wallet;
    scwAddress;
    smart_account;
    async init(arcana_key, wallet, gateway_url) {
        this.provider = wallet.provider;
        this.wallet = wallet;
        if (gateway_url != undefined) {
            this.gateway_url = gateway_url;
        }
        // fetch chain id from provider
        let chain_id = (await this.provider.getNetwork()).chainId;
        // make a get request to gateway_url to get api key
        let res = await axios_1.default.get(this.gateway_url +
            `/api/v1/gastank/api-key/?app_address=${arcana_key}&chain_id=${chain_id}`);
        this.api_key = res.data.api_key;
        const bundler = new bundler_1.Bundler({
            bundlerUrl: `https://bundler.biconomy.io/api/v2/${chain_id}/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44`,
            chainId: chain_id,
            entryPointAddress: account_1.DEFAULT_ENTRYPOINT_ADDRESS,
        });
        let paymaster_url = `https://paymaster.biconomy.io/api/v1/${chain_id}/${this.api_key}`;
        const paymaster = new paymaster_1.BiconomyPaymaster({
            paymasterUrl: paymaster_url, // you can get this value from biconomy dashboard.
        });
        const biconomySmartAccountConfig = {
            signer: this.wallet,
            chainId: chain_id,
            paymaster: paymaster,
            bundler: bundler,
        };
        const biconomyAccount = new account_1.BiconomySmartAccount(biconomySmartAccountConfig);
        this.smart_account = await biconomyAccount.init();
        this.scwAddress = await this.smart_account.getSmartAccountAddress();
    }
    // function to get the owner
    getOwner() {
        return this.smart_account.owner;
    }
    // function to get the scw address
    getSCWAddress() {
        return this.scwAddress;
    }
    async doTx(tx) {
        const userOp = await this.smart_account.buildUserOp([tx]);
        const biconomyPaymaster = this.smart_account
            .paymaster;
        let paymasterServiceData = {
            mode: paymaster_1.PaymasterMode.SPONSORED,
        };
        const paymasterAndDataResponse = await biconomyPaymaster.getPaymasterAndData(userOp, paymasterServiceData);
        userOp.paymasterAndData = paymasterAndDataResponse.paymasterAndData;
        const userOpResponse = await this.smart_account.sendUserOp(userOp);
        return userOpResponse;
    }
}
exports.SCW = SCW;
exports.default = SCW;
//# sourceMappingURL=index.js.map