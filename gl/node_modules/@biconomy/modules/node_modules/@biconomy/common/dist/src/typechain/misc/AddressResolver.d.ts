import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export declare namespace IAddressResolver {
    type SmartAccountResultStruct = {
        accountAddress: PromiseOrValue<string>;
        factoryAddress: PromiseOrValue<string>;
        currentImplementation: PromiseOrValue<string>;
        currentVersion: PromiseOrValue<string>;
        factoryVersion: PromiseOrValue<string>;
        deploymentIndex: PromiseOrValue<BigNumberish>;
    };
    type SmartAccountResultStructOutput = [
        string,
        string,
        string,
        string,
        string,
        BigNumber
    ] & {
        accountAddress: string;
        factoryAddress: string;
        currentImplementation: string;
        currentVersion: string;
        factoryVersion: string;
        deploymentIndex: BigNumber;
    };
}
export interface AddressResolverInterface extends utils.Interface {
    functions: {
        "ecdsaOwnershipModule()": FunctionFragment;
        "resolveAddresses(address,uint8)": FunctionFragment;
        "resolveAddressesFlexibleForV2(address,uint8,address,bytes)": FunctionFragment;
        "resolveAddressesV1(address,uint8)": FunctionFragment;
        "smartAccountFactoryV1()": FunctionFragment;
        "smartAccountFactoryV2()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ecdsaOwnershipModule" | "resolveAddresses" | "resolveAddressesFlexibleForV2" | "resolveAddressesV1" | "smartAccountFactoryV1" | "smartAccountFactoryV2"): FunctionFragment;
    encodeFunctionData(functionFragment: "ecdsaOwnershipModule", values?: undefined): string;
    encodeFunctionData(functionFragment: "resolveAddresses", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "resolveAddressesFlexibleForV2", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "resolveAddressesV1", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "smartAccountFactoryV1", values?: undefined): string;
    encodeFunctionData(functionFragment: "smartAccountFactoryV2", values?: undefined): string;
    decodeFunctionResult(functionFragment: "ecdsaOwnershipModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resolveAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resolveAddressesFlexibleForV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resolveAddressesV1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "smartAccountFactoryV1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "smartAccountFactoryV2", data: BytesLike): Result;
    events: {};
}
export interface AddressResolver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AddressResolverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ecdsaOwnershipModule(overrides?: CallOverrides): Promise<[string]>;
        resolveAddresses(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[IAddressResolver.SmartAccountResultStructOutput[]]>;
        resolveAddressesFlexibleForV2(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, _moduleAddress: PromiseOrValue<string>, _moduleSetupData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[IAddressResolver.SmartAccountResultStructOutput[]]>;
        resolveAddressesV1(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[IAddressResolver.SmartAccountResultStructOutput[]]>;
        smartAccountFactoryV1(overrides?: CallOverrides): Promise<[string]>;
        smartAccountFactoryV2(overrides?: CallOverrides): Promise<[string]>;
    };
    ecdsaOwnershipModule(overrides?: CallOverrides): Promise<string>;
    resolveAddresses(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IAddressResolver.SmartAccountResultStructOutput[]>;
    resolveAddressesFlexibleForV2(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, _moduleAddress: PromiseOrValue<string>, _moduleSetupData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IAddressResolver.SmartAccountResultStructOutput[]>;
    resolveAddressesV1(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IAddressResolver.SmartAccountResultStructOutput[]>;
    smartAccountFactoryV1(overrides?: CallOverrides): Promise<string>;
    smartAccountFactoryV2(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        ecdsaOwnershipModule(overrides?: CallOverrides): Promise<string>;
        resolveAddresses(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IAddressResolver.SmartAccountResultStructOutput[]>;
        resolveAddressesFlexibleForV2(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, _moduleAddress: PromiseOrValue<string>, _moduleSetupData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IAddressResolver.SmartAccountResultStructOutput[]>;
        resolveAddressesV1(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IAddressResolver.SmartAccountResultStructOutput[]>;
        smartAccountFactoryV1(overrides?: CallOverrides): Promise<string>;
        smartAccountFactoryV2(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        ecdsaOwnershipModule(overrides?: CallOverrides): Promise<BigNumber>;
        resolveAddresses(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        resolveAddressesFlexibleForV2(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, _moduleAddress: PromiseOrValue<string>, _moduleSetupData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        resolveAddressesV1(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        smartAccountFactoryV1(overrides?: CallOverrides): Promise<BigNumber>;
        smartAccountFactoryV2(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        ecdsaOwnershipModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        resolveAddresses(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        resolveAddressesFlexibleForV2(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, _moduleAddress: PromiseOrValue<string>, _moduleSetupData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        resolveAddressesV1(_eoa: PromiseOrValue<string>, _maxIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        smartAccountFactoryV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        smartAccountFactoryV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
